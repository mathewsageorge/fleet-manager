// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  role      UserRole @default(DRIVER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations for incidents
  incidentsReported Incident[] @relation("IncidentReporter")
  incidentsAssigned Incident[] @relation("IncidentAssignee")
  incidentUpdates   IncidentUpdate[]

  @@map("users")
}

// Car model
model Car {
  id           Int      @id @default(autoincrement())
  make         String
  model        String
  year         Int
  licensePlate String   @unique
  vin          String?  @unique
  color        String?
  status       CarStatus @default(ACTIVE)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  incidents    Incident[]
  carReadings  CarReading[]

  @@map("cars")
}

// Car Reading model (for odometer readings)
model CarReading {
  id          Int      @id @default(autoincrement())
  carId       Int
  reading     Float
  readingType ReadingType @default(ODOMETER)
  recordedAt  DateTime @default(now())
  recordedBy  Int?
  notes       String?

  // Relations
  car         Car        @relation(fields: [carId], references: [id])
  incidents   Incident[]

  @@index([carId])
  @@map("car_readings")
}

// Main Incident model
model Incident {
  id              Int              @id @default(autoincrement())
  carId           Int
  reportedById    Int              // User who reported the incident
  assignedToId    Int?             // Fleet manager assigned to handle
  
  // Incident Details
  title           String
  description     String
  severity        IncidentSeverity @default(LOW)
  status          IncidentStatus   @default(PENDING)
  type            IncidentType
  
  // Location & Time
  location        String?          // Address or description
  latitude        Float?
  longitude       Float?
  occurredAt      DateTime
  reportedAt      DateTime         @default(now())
  
  // Associated Data
  carReadingId    Int?             // Odometer reading at time of incident
  images          String[]         // Array of image URLs
  documents       String[]         // Array of document URLs
  
  // Resolution
  resolutionNotes String?
  estimatedCost   Float?
  actualCost      Float?
  resolvedAt      DateTime?
  
  // Timestamps
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  // Relations
  car             Car              @relation(fields: [carId], references: [id])
  reportedBy      User             @relation("IncidentReporter", fields: [reportedById], references: [id])
  assignedTo      User?            @relation("IncidentAssignee", fields: [assignedToId], references: [id])
  carReading      CarReading?      @relation(fields: [carReadingId], references: [id])
  updates         IncidentUpdate[]
  
  @@index([carId])
  @@index([reportedById])
  @@index([assignedToId])
  @@index([status])
  @@index([severity])
  @@index([occurredAt])
  @@map("incidents")
}

model IncidentUpdate {
  id          Int      @id @default(autoincrement())
  incidentId  Int
  userId      Int
  message     String
  updateType  IncidentUpdateType
  createdAt   DateTime @default(now())
  
  // Relations
  incident    Incident @relation(fields: [incidentId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  
  @@index([incidentId])
  @@index([userId])
  @@map("incident_updates")
}

// Enums
enum UserRole {
  DRIVER
  FLEET_MANAGER
  ADMIN
  
  @@map("user_roles")
}

enum CarStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  RETIRED
  
  @@map("car_statuses")
}

enum ReadingType {
  ODOMETER
  FUEL_LEVEL
  
  @@map("reading_types")
}

enum IncidentSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
  
  @@map("incident_severities")
}

enum IncidentStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
  CANCELLED
  
  @@map("incident_statuses")
}

enum IncidentType {
  ACCIDENT
  BREAKDOWN
  THEFT
  VANDALISM
  MAINTENANCE_ISSUE
  TRAFFIC_VIOLATION
  FUEL_ISSUE
  OTHER
  
  @@map("incident_types")
}

enum IncidentUpdateType {
  STATUS_CHANGE
  ASSIGNMENT
  COMMENT
  COST_UPDATE
  RESOLUTION
  
  @@map("incident_update_types")
}
